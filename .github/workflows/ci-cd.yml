name: CI/CD Pipeline

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install

    - name: Run type checking
      run: bun run typecheck

    - name: Run linting
      run: bun run lint
      
    - name: Run formatting check
      run: bun run check
      
    - name: Run tests with coverage
      run: bun run coverage
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

        
    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        
    - name: Get previous version
      id: previous-version
      run: |
        # Get the previous commit on master
        PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
        git checkout $PREVIOUS_COMMIT
        PREVIOUS_VERSION=$(node -p "require('./package.json').version")
        echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
        echo "Previous version: $PREVIOUS_VERSION"
        git checkout HEAD
        
    - name: Check if version was bumped
      id: version-check
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
        PREVIOUS_VERSION="${{ steps.previous-version.outputs.previous_version }}"
        
        echo "Comparing versions: $PREVIOUS_VERSION -> $CURRENT_VERSION"
        
        # Check if version was actually changed
        if [ "$CURRENT_VERSION" = "$PREVIOUS_VERSION" ]; then
          echo "Version was not changed. Skipping release."
          echo "should_release=false" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Validate version format (semver)
        if ! echo "$CURRENT_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$' > /dev/null; then
          echo "Invalid version format: $CURRENT_VERSION"
          exit 1
        fi
        
        # Compare versions using sort -V (version sort)
        if printf '%s\n' "$PREVIOUS_VERSION" "$CURRENT_VERSION" | sort -V | head -n1 | grep -q "$CURRENT_VERSION"; then
          echo "New version ($CURRENT_VERSION) is not higher than previous version ($PREVIOUS_VERSION)"
          exit 1
        fi
        
        echo "Version bump is valid: $PREVIOUS_VERSION -> $CURRENT_VERSION"
        echo "should_release=true" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT

    outputs:
      should_release: ${{ steps.version-check.outputs.should_release }}
      current_version: ${{ steps.current-version.outputs.current_version }}
      previous_version: ${{ steps.previous-version.outputs.previous_version }}
    

  release:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.test.outputs.should_release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Build project
      run: bun run build
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Get version
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Publishing version: $VERSION"
        
    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          
          This is an automated release for version ${{ steps.version.outputs.version }}.
          
          ### Version Bump
          - Previous version: ${{ needs.check-version.outputs.previous_version }}
          - New version: ${{ steps.version.outputs.version }}
          
          ### Build Info
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Triggered by: ${{ github.actor }}
        draft: false
        prerelease: false
